#!/usr/bin/python

import platform
import time, os , syslog , re 
import tweepy		
#from urlparse import urlparse

#import ipintellib	# RCH library - master on mars
import mailalert	# RCH library
#import p0fcmd		# RCH library - master on mars
#import filter_sebek     # RCH library - master on mars
#import extract_url      # RCH library - master on mars


# need this so program can be monitored by monit
# make this a library function
def makePidFile(name):
    pid = os.getpid() 
        
    pidFilename = "/var/run/rchpids/" + name + ".pid"
    fp=open(pidFilename,'w')
    print >> fp,pid
    fp.close()            
    #print "pid is " + `pid`
    return pid  # returns None if failed
                                
# make this a common shared function
def statusAlert(subject,content):
    smtpServer   = 'smtp.btconnect.com'
    sender       = 'the.crouches@btconnect.com'   
    destination  = ['ipbb.mvtc@googlemail.com']
    debugLevel   = False
                    
    try:        
        now = time.time()
        nowLocal = time.localtime(now)
                                        
        # Notify !
        alertSubject = "honeypot status : " + subject
        alertContent = content + "\n\nThis e-mail was automatically generated by the Gloworm Honeypot System on " + time.asctime(nowLocal) + "\n\n"
                                                                                                          
        status = mailalert.mailalert(sender,destination,smtpServer,alertSubject,alertContent,debugLevel)
                                                                                
        # uncomment the following line if you want to see the e-mail being sent
        print "notify     : e-mail : subject=" + '"' + alertSubject + '"'
                                                                                                
        # Add a record to syslog
        a = "Sent alert e-mail, Subject=" + alertSubject + " to " + destination[0]
        syslog.syslog("kojoney_twitter_drone.py :statusAert() : " + a)
                                                                                                                        
    except Exception,e:
        syslog.syslog("kojoney_twitter_drone.py : statusAlert() : " + `e`)
                                                                                                                                    
def lockBotwall(nodeName) :
    if nodeName == "mars" :
        cmd = "/sbin/ifconfig eth1 down"
        statusAlert("LOCK control msg received by " + nodeName,"Received following control request via Twitter : " + cmd) 
        syslog.syslog("kojoney_twitter_drone.py : lockBotwall() cmd = " + cmd)
        print "Twitter Control : cmd = " + cmd
        os.system(cmd)
        #TweetClientCC.PostUpdate("Twitter Control : " + cmd)
    return

def unlockBotwall(nodeName) :
    if nodeName == "mars" :
        cmd = "/sbin/ifconfig eth1 up"
        statusAlert("UNLOCK control msg received by " + nodeName,"Received following control request via Twitter : " + cmd) 
        syslog.syslog("kojoney_twitter_drone.py : unlockBotwall() cmd = " + cmd)
        print "Twitter Control : cmd = " + cmd
        os.system(cmd)
        #TweetClientCC.PostUpdate("Twitter Control : " + cmd)
    return

# No synchronisation
def resetAll(nodeName) :
    cmd = "/sbin/shutdown -r now"
    statusAlert("REBOOT_ALL control msg received by " + nodeName,"Received following control request via Twitter : " + cmd)     
    syslog.syslog("kojoney_twitter_drone.py : reset() cmd = " + cmd)
    print "Twitter Control : cmd = " + cmd
    os.system(cmd)
    #TweetClientCC.PostUpdate("Twitter Control : " + cmd)
    return

def resetVM(nodeName) :
    if nodeName == "mars" :
        return
    cmd = "/sbin/shutdown -r now"
    statusAlert("REBOOT_VM control msg received by " + nodeName,"Received following control request via Twitter : " + cmd)     
    syslog.syslog("kojoney_twitter_drone.py : reset() cmd = " + cmd)
    print "Twitter Control : cmd = " + cmd
    os.system(cmd)
    #TweetClientCC.PostUpdate("Twitter Control : " + cmd)
    return

def resetBotwall(nodeName) :
    if nodeName != "mars" :
        return
    cmd = "/sbin/shutdown -r now"
    statusAlert("REBOOT_BOTWALL control msg received by " + nodeName,"Received following control request via Twitter : " + cmd)     
    syslog.syslog("kojoney_twitter_drone.py : reset() cmd = " + cmd)
    print "Twitter Control : cmd = " + cmd
    os.system(cmd)
    #TweetClientCC.PostUpdate("Twitter Control : " + cmd)
    return

def help(nodeName) :
    if nodeName == "mars" :
        help = "Commands:-\ncmd reboot all <rnd> : Reboot Botwall and VM host/guest\ncmd reboot botwall <rnd> : Reboot Botwall only\ncmd reboot vm  <rnd> : Reboot VM host only/guest\ncmd lock   <rnd>     : Shutdown Botwall interface\ncmd unlock <rnd>     : Unshut   Botwall interface\ncmd help   <rnd>     : Send help via e-mail"
        statusAlert("HELP control msg received by " + nodeName,help)     
        syslog.syslog("kojoney_twitter_drone.py : help()")
        
        return

def report(nodeName) :
    if nodeName == "mars" :
        cmd = "/home/crouchr/run_drone_report.sh"
        syslog.syslog("kojoney_twitter_drone.py : report() cmd = " + cmd)
        print "Twitter Control : cmd = " + cmd
        #TweetClientCC.PostUpdate("Twitter Control : " + cmd)
    return

def processCandCTweet(nodeName,tweet) :
    print "processC&Ctweet() : node=" + nodeName + " raw tweet=" + tweet
    tweet = tweet.lower()	 # convert to lower case
    
    if tweet.find("cmd unlock ") != -1 :   	 	# unshut interface
        unlockBotwall(nodeName)
    elif tweet.find("cmd lock ") != -1 :	 	# shutdown interface
        lockBotwall(nodeName)    
    elif tweet.find("cmd reboot all") != -1 :  	 	# reboot Qemu host/guest and Botwall
        resetAll(nodeName)
    elif tweet.find("cmd reboot vm") != -1 :     	# reboot Qemu host/guest
        resetVM(nodeName)
    elif tweet.find("cmd reboot botwall") != -1 :     	# reboot Botwall
        resetBotwall(nodeName)       
    elif tweet.find("cmd report ") != -1 : 	 	# send report to fixed e-mail address
        report(nodeName)
    elif tweet.find("cmd help ") != -1 : 	 	# send help e-mail 
        help(nodeName) 
    elif tweet.find("cmd test ") != -1 : 	
        # This works - leave the code commented or you get into a loop of e-mails
        msg = "__drone.py running on node=" + nodeName + " sent this test Tweet, epoch=" + `time.time()`  
        print "Post the following test Tweet : " + msg
        #status = TweetClientCC.PostUpdate("__drone.py sent test GeoTagged Tweet from a location in California, epoch=" + `time.time()` , lat = 34 , long = -118)  
        ## - add back in when tweepy completed : status = TweetClientCC.PostUpdate(msg)  
    else :
        pass
        #print "Unknown Twitter command received = " + tweet
        #syslog.syslog("kojoney_twitter_drone.py : processCandCTweet() : unknown Twitter command received = " + tweet)
        #statusAlert("Unknown Twitter command received by " + nodeName,"command = " + tweet)     
    


# ==============

cache = {}
syslog.openlog("kojoney_twitter_drone")         # Set syslog program name 

# Make pidfile so we can be monitored by monit        
pid =  makePidFile("kojoney_twitter_drone")
if pid == None:
    syslog.syslog("kojoney_twitter_drone.py : Failed to create pidfile for pid " + `pid`)
    sys.exit(0)
else:
    syslog.syslog("kojoney_twitter_drone.py started with pid " + `pid`)
            
# Create a connection to Twitter


DR_CONSUMER_KEY    = '8sgWbFKOr3jeIzmKqjFXIQ'
DR_CONSUMER_SECRET = 'US6XbuRCD8Ef6mHot8ZwBGqbuaoouV2PZ4PNTE3hXYA'

DR_ACCESS_KEY    = '170203470-6Qz17nnc6oV3cYJpAdwEWqe6aI3fTfx7Wl1luHOF'
DR_ACCESS_SECRET = 'HIGZrtONkUHF8jgBLlcBKvcEeos9cK9cUdxyQee8M'

# Basic authentication
#auth = tweepy.BasicAuthHandler('honeydrone6','fuckfacebook')
#api_dr = tweepy.API(auth)

# OAuth authentication
auth = tweepy.OAuthHandler(DR_CONSUMER_KEY, DR_CONSUMER_SECRET)
auth.set_access_token(DR_ACCESS_KEY, DR_ACCESS_SECRET)
api_dr=tweepy.API(auth)


try :     
    #TweetClient   = twitter.Api(username="honeydrone6", password="fuckfacebook")                
    #TweetClientCC = twitter.Api(username="honeycc6"   , password="fuckfacebook")                
    
    if platform.node() == "mars" :
        msg = "SYSTEM : Botwall started OK, id=" + `time.time()`
    else :
        msg = "SYSTEM : Honeypot host started OK, id=" + `time.time()`
    
    ## reinstate this : print msg    
    ## reinstate this : TweetClientCC.PostUpdate(msg)

    #print "Twitter Public Timeline Status messages"
    #statuses = TweetClient.GetPublicTimeline()
    #print [s.user.name for s in statuses]
    #for s in statuses :
    #    print s.user.name

    # Populate cache for first time and do not process
    #statuses = TweetClient.GetUserTimeline("honeycc6")	# pulls last 20 Tweets
    #for s in statuses : 
    #    cache[s.id] = s.text
    #    print s.text
    
    home_timeline = api_dr.home_timeline()
    
    print "Below are the stale tweets :-"
    for tweet in home_timeline:
        cache[tweet.id] = tweet.text
        print "  id=" + `tweet.id` + " text=" + tweet.text
        
    
    print "Current Tweets have now been added to stale cache"
    print "Sleeping for 10 seconds..."
    time.sleep(10)
    
    # Look for new tweets
    while True:
        #print "\nTwitter Timeline for @honeycc6 (C&C feed) :"
        #statuses = TweetClient.GetUserTimeline("honeycc6")
        home_timeline = api_dr.home_timeline()
    
        for tweet in home_timeline:       
            if cache.has_key(tweet.id) == False :
                print "\n*** New Tweet found ***"
                cache[tweet.id] = tweet.text      
                processCandCTweet(platform.node(),tweet.text)
        print "Sleeping for 30 seconds..."
        time.sleep(30)
        
        # the tweet seems to include a different value of id to tweet.id but still seems to work - bug ?
        
    print "Exiting."

except Exception,e:
    syslog.syslog("kojoney_twitter_drone.py : exception " + `e`)
    
                                                                 