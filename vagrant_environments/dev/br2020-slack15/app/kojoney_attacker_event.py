#!/usr/bin/python

import time, os , syslog , re 
#import kojoney_amun_idmef
#import kojoney_idmef_common
import ipintellib
from pprint import pprint
import simplejson as json

# Note that this is the function that the client runs and that it minimises information
# to only that which can only be determined by the sensor
# GeoIP / AS info can be generated by the server
# For OSSEC SNORT rules :-
#   addInfo1 = Snort SID
#   addInfo2 = Snort Message
#
def generateAttackerEvent(txnId,attackerIP,p0fDict,sensorId,phase,eventSource,eventId,eventDesc,MD5,virusVendor,virusName,addInfo1,addInfo2):
    ATTACKER_EVENT_PATH        = "/home/var/log/attacker.log"
    ATTACKER_SNORT_FORMAT_PATH = "/home/var/log/attacker-snort.log"

    try :
        sdata = {}
        
        print "generateAttackerEvent() : eventDesc=" + eventDesc.__str__() + ", eventSOurce=" + eventSource.__str__()
        
        # There must be a non-local IP address involved for there to be an attacker
        if attackerIP == None or attackerIP == "0.0.0.0" :
            return None
            
        if p0fDict == None :
            os = "none"
        else:
            os = p0fDict['genre_short']
            sdata['os'] = os.__str__()
            
        if MD5 == None :
            MD5 = "none"
        else :
            sdata['md5'] = MD5.__str__()
            
        if eventId == None :
            eventId = 0
            
        if virusVendor == None :
            virusVendor = "none"
        else :
            sdata['av_vendor'] = virusVendor.__str__()
                    
        if virusName == None :
            virusName = "none"    
        else :
            sdata['virus'] = virusName.__str__()
                
        if addInfo1 == None :
            addInfo1 = "none"    
        else :
            sdata['add_info_1'] = addInfo1.__str__()
            
        if addInfo2 == None :
            addInfo2 = "none"    
        else :
            sdata['add_info_2'] = addInfo2.__str__()
        
        if "dPort" in addInfo1 :
            port = addInfo1.split("dPort=")[1]
            port = port.split(':')[0] 
            port = int(port)
            sdata['port'] = port
            
        if "SID=" in addInfo2 :
            sid = addInfo2.split("SID=")[1]
            sid = sid.split(":")[1]
            sid = int(sid)
            sdata['sid'] = sid    
            eventDesc = addInfo2.split(":")[0]
            sdata['add_info_2'] = "NO_INFO"
            
        # fixme - add OK login as well
        if "failed login attempt" in eventDesc.lower() or "successful login attempt" in eventDesc.lower() :
            sdata['username'] = addInfo1.__str__()
            sdata['password'] = addInfo2.__str__()

            
        sdata['event_source'] = eventSource.__str__()    
        sdata['event_desc']   = eventDesc.__str__()
        sdata['phase']        = phase.__str__()
        sdata['ip']           = attackerIP.__str__()
        
        pprint(sdata)

        # Generate a JSON-format syslog to be processed by ELK        
        logMsg = json.dumps(sdata) # convert to JSON
        syslog.openlog("kojoney_tweet")
        syslog.syslog(logMsg)
        
        epoch = time.time()    
             
        msg = txnId.__str__() + "," + "%.2f" % epoch + "," + time.ctime() + "," + attackerIP.__str__() + "," + sensorId.__str__() + "," + phase.__str__() +\
                                "," + os.__str__() + ',' + eventSource.__str__() + "," + eventId.__str__() + "," + eventDesc +\
                                 "," + MD5 + "," + virusVendor + "," + virusName + "," + addInfo1 + "," + addInfo2 
        
        
        fpOut = open(ATTACKER_EVENT_PATH,'a')
        print >> fpOut,msg
        fpOut.close()
        print "generateAttackerEvent() : msg = " + msg

            
        # Generate Snort-format syslog file for post-processing with SnortaLog
        logMsg = makeSnortalogMsg(attackerIP,phase,eventSource,eventDesc)
        fpOut = open(ATTACKER_SNORT_FORMAT_PATH,'a')
        print >> fpOut,logMsg
        fpOut.close()
        
        print "generateAttackerEvent() : Snort-format logMsg = " + logMsg

        return None

    except Exception,e:
        msg = "kojoney_attacker_event.py : generateAttackerEvent() : " + e.__str__()
        print msg
        syslog.syslog(msg)
        return None

def makeSnortalogMsg(attackerIP,phase,eventSource,eventDesc):
    try:
        PRIORITY_MAP = { 'PROBING' : '4' , 'SCANNING' : '3' , 'PSCAN' : '3' , 'BHOLE' : '3' , 'ATTACKING' : '2' , 'GAINED_ACCESS' : '1' , 'MAINTAIN_ACCESS' : '1' , 'COVER_TRACKS' : '1' , 'MWARE' : '1'}  
        
        #print attackerIP
        #print phase
        #print eventSource
        #print eventDesc
        #print PRIORITY_MAP[phase]
        #print "-----"
                
        # Generate Snort-format syslog file for post-processing with SnortaLog
        tstamp = time.ctime()
        a = tstamp.split(" ")
        #print a.__str__()
        tstamp = a[1] + " " + a[2] + " " + a[3]		# lose the day and year
        
        logMsg = tstamp + " mars snort[1234]: [1:2234567:1] " + eventSource + " " + eventDesc + " [Classification: " + eventSource + "-" + phase + "] [Priority: " + PRIORITY_MAP[phase] + "]: {TCP} " + attackerIP + ":111 -> 192.168.1.67:111" 
        #logMsg = tstamp + " mars snort[1234]: [1:2001331:8] " + eventDesc + " [Classification: Misc activity] [Priority: " + PRIORITY_MAP[phase] + "]: {TCP} " + attackerIP + ":111 -> 192.168.1.67:111" 
        
        return logMsg
        
    except Exception,e:
        msg = "kojoney_attacker_event.py : makeSnortalogMsg() : exception : " + e.__str__()
        print msg
        syslog.syslog(msg)
        return None
                           
# -------------------------------------------------------
        
# Start of code
# This is a test harness so comment/uncomment the relevent lines        

# TO BE WRITTEN 
        
if __name__ == '__main__' :
       
# Set the input file to scan
    #filename = '/usr/local/src/amun/logs/testcases/submissions.log'
    #filename = '/usr/local/src/amun/logs/testcases/exploits.log'
    filename = '/home/var/log/attacker.log'
    
    fpOut = open('/usr/local/src/snortalog/attacker-snortalog.log','w')
    file  = open(filename,'r')
    
    n = 0	# number of records processed
    
    #while n < 1000 :
    while True :
        n = n + 1
        line = file.readline()
        line = line.rstrip('\n')
        
        if not line:		# no data to process
            break
        else :			# new data has been found
        
            fields = line.split(',')
            #print fields
            attackerIP  = fields[3]
            phase       = fields[5]
            eventSource = fields[7]
            eventDesc   = fields[9]
            
            logMsg = makeSnortalogMsg(attackerIP,phase,eventSource,eventDesc)
            #print logMsg
            print >> fpOut,logMsg
    
    # End of file                              
    print "No more data to process, closing files."
    fpOut.close()
    
    
                 